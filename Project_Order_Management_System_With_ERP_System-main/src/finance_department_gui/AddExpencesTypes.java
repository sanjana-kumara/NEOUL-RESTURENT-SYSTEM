/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package finance_department_gui;

import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Color;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import javax.swing.table.DefaultTableModel;
import model.MySql;

/**
 *
 * @author GOLDEN FIELD
 */
public class AddExpencesTypes extends javax.swing.JFrame {

    /**
     * Creates new form AddExpencesTypes
     */
    public AddExpencesTypes() {
        initComponents();
        addPlaceholder(); //placeholder to textfield
        loadExpencesTypes();

    }

    //addplaceholder method
    private void addPlaceholder() {

        //Expences types textfield placeholder and color
        ExpencesTypeTextField.setText("New Type");
        ExpencesTypeTextField.setForeground(Color.GRAY);

        //Search textfield placeholder and color
        searchTextField.setText("Search by Type name");
        searchTextField.setForeground(Color.GRAY);
    }

    //load Types to table
    private void loadExpencesTypes() {
        try {

            // Execute an SQL query to fetch all records from the "company_expences_types" table
            ResultSet resultSet = MySql.executeSearch("SELECT * FROM `company_expences_type` ");

            DefaultTableModel model = (DefaultTableModel) ExpencesTypeTable.getModel();
            model.setRowCount(0);  // Clear any existing rows in the table 

            // Loop through the result set to extract expences types data
            while (resultSet.next()) {

                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("company_expences_type_id"));
                vector.add(resultSet.getString("expences_type_name"));

                model.addRow(vector); // Add the vector as a new row to the table model

            }
        } catch (Exception e) {

            e.printStackTrace();

        }
    }

    //search method
    private void search(String searchName) {

        DefaultTableModel model = (DefaultTableModel) ExpencesTypeTable.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
        ExpencesTypeTable.setRowSorter(tr);
        // Apply the RowFilter to search across columns 1 (Type Name)
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + searchName, 1));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanal = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        bodyPanal = new javax.swing.JPanel();
        ExpencesAddSectionPanal = new javax.swing.JPanel();
        ExpencesTypeTextField = new javax.swing.JTextField();
        refreshButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        updateButton = new com.k33ptoo.components.KButton();
        addButton = new com.k33ptoo.components.KButton();
        TypeSearchPanal = new javax.swing.JPanel();
        ExpencesTablePanal = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ExpencesTypeTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        BackToDashboardPanel = new javax.swing.JPanel();
        BackToDashboardButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        headerPanal.setBackground(new java.awt.Color(153, 153, 153));
        headerPanal.setPreferredSize(new java.awt.Dimension(720, 60));

        jLabel1.setFont(new java.awt.Font("Audiowide", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Expences Types");

        javax.swing.GroupLayout headerPanalLayout = new javax.swing.GroupLayout(headerPanal);
        headerPanal.setLayout(headerPanalLayout);
        headerPanalLayout.setHorizontalGroup(
            headerPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1115, Short.MAX_VALUE)
        );
        headerPanalLayout.setVerticalGroup(
            headerPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );

        getContentPane().add(headerPanal, java.awt.BorderLayout.PAGE_START);

        bodyPanal.setLayout(new java.awt.BorderLayout());

        ExpencesAddSectionPanal.setPreferredSize(new java.awt.Dimension(720, 90));

        ExpencesTypeTextField.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ExpencesTypeTextField.setToolTipText("Add Expences Type");
        ExpencesTypeTextField.setName(""); // NOI18N
        ExpencesTypeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ExpencesTypeTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ExpencesTypeTextFieldFocusLost(evt);
            }
        });
        ExpencesTypeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpencesTypeTextFieldActionPerformed(evt);
            }
        });

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/refresh.png"))); // NOI18N
        refreshButton.setToolTipText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel3.setText("Add Expences Type");

        updateButton.setText("Type Update");
        updateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        updateButton.setkEndColor(new java.awt.Color(0, 204, 204));
        updateButton.setkHoverEndColor(new java.awt.Color(0, 102, 153));
        updateButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        updateButton.setkHoverStartColor(new java.awt.Color(0, 204, 204));
        updateButton.setkPressedColor(new java.awt.Color(0, 102, 153));
        updateButton.setkSelectedColor(new java.awt.Color(0, 102, 153));
        updateButton.setkStartColor(new java.awt.Color(0, 102, 153));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add Type");
        addButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addButton.setkEndColor(new java.awt.Color(0, 204, 204));
        addButton.setkHoverEndColor(new java.awt.Color(0, 102, 153));
        addButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        addButton.setkHoverStartColor(new java.awt.Color(0, 204, 204));
        addButton.setkPressedColor(new java.awt.Color(0, 102, 153));
        addButton.setkSelectedColor(new java.awt.Color(0, 102, 153));
        addButton.setkStartColor(new java.awt.Color(0, 102, 153));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ExpencesAddSectionPanalLayout = new javax.swing.GroupLayout(ExpencesAddSectionPanal);
        ExpencesAddSectionPanal.setLayout(ExpencesAddSectionPanalLayout);
        ExpencesAddSectionPanalLayout.setHorizontalGroup(
            ExpencesAddSectionPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExpencesAddSectionPanalLayout.createSequentialGroup()
                .addContainerGap(151, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(12, 12, 12)
                .addComponent(ExpencesTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(refreshButton)
                .addContainerGap(151, Short.MAX_VALUE))
            .addComponent(jSeparator1)
        );
        ExpencesAddSectionPanalLayout.setVerticalGroup(
            ExpencesAddSectionPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExpencesAddSectionPanalLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(ExpencesAddSectionPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExpencesTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ExpencesAddSectionPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bodyPanal.add(ExpencesAddSectionPanal, java.awt.BorderLayout.PAGE_START);

        TypeSearchPanal.setLayout(new java.awt.BorderLayout());

        ExpencesTypeTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ExpencesTypeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Expences ID", "Expences Type Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ExpencesTypeTable.getTableHeader().setReorderingAllowed(false);
        ExpencesTypeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExpencesTypeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ExpencesTypeTable);

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel2.setText("Search  By Type Name");

        searchTextField.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        searchTextField.setToolTipText("Search Expences Type By Name");
        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusLost(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout ExpencesTablePanalLayout = new javax.swing.GroupLayout(ExpencesTablePanal);
        ExpencesTablePanal.setLayout(ExpencesTablePanalLayout);
        ExpencesTablePanalLayout.setHorizontalGroup(
            ExpencesTablePanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExpencesTablePanalLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(ExpencesTablePanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ExpencesTablePanalLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(12, 12, 12)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ExpencesTablePanalLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)
                        .addGap(35, 35, 35))))
        );
        ExpencesTablePanalLayout.setVerticalGroup(
            ExpencesTablePanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExpencesTablePanalLayout.createSequentialGroup()
                .addGroup(ExpencesTablePanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        TypeSearchPanal.add(ExpencesTablePanal, java.awt.BorderLayout.CENTER);

        BackToDashboardPanel.setBackground(new java.awt.Color(153, 153, 153));
        BackToDashboardPanel.setPreferredSize(new java.awt.Dimension(826, 50));

        BackToDashboardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/back-arrow.png"))); // NOI18N
        BackToDashboardButton.setToolTipText("Sign Out");
        BackToDashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToDashboardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackToDashboardPanelLayout = new javax.swing.GroupLayout(BackToDashboardPanel);
        BackToDashboardPanel.setLayout(BackToDashboardPanelLayout);
        BackToDashboardPanelLayout.setHorizontalGroup(
            BackToDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackToDashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackToDashboardButton)
                .addContainerGap(1071, Short.MAX_VALUE))
        );
        BackToDashboardPanelLayout.setVerticalGroup(
            BackToDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackToDashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackToDashboardButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TypeSearchPanal.add(BackToDashboardPanel, java.awt.BorderLayout.PAGE_END);

        bodyPanal.add(TypeSearchPanal, java.awt.BorderLayout.CENTER);

        getContentPane().add(bodyPanal, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //signOutButtonCode

    private void BackToDashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToDashboardButtonActionPerformed

        dispose();

    }//GEN-LAST:event_BackToDashboardButtonActionPerformed

    private void ExpencesTypeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpencesTypeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExpencesTypeTextFieldActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        reset(); //refresh the frame
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void ExpencesTypeTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ExpencesTypeTextFieldFocusGained
        //check and set clear the current department textfield to enter data
        if (ExpencesTypeTextField.getText().equals("New Type")) {
            ExpencesTypeTextField.setText("");
            ExpencesTypeTextField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_ExpencesTypeTextFieldFocusGained

    private void ExpencesTypeTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ExpencesTypeTextFieldFocusLost
        //set back the placeholder
        if (ExpencesTypeTextField.getText().isEmpty()) {
            ExpencesTypeTextField.setText("New Type");
            ExpencesTypeTextField.setForeground(Color.GRAY);
        }

    }//GEN-LAST:event_ExpencesTypeTextFieldFocusLost

    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained
        //check and set clear the current textfield to enter data
        if (searchTextField.getText().equals("Search by Type name")) {
            searchTextField.setText("");
            searchTextField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_searchTextFieldFocusGained

    private void searchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusLost
        //set back the placeholder
        if (searchTextField.getText().isEmpty()) {
            searchTextField.setText("Search by Type name");
            searchTextField.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_searchTextFieldFocusLost

    //Add Button Function
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {

            // Get the text entered in the expences type text field
            String expencestype = ExpencesTypeTextField.getText(); //Select expences type textfield

            // Check if the expences type is empty
            if (expencestype.isEmpty() || expencestype.equals("New Type")) {

                // Show a warning message if no expences type is entered
                JOptionPane.showMessageDialog(this, "Please enter Expences Type", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {

                // Check if the expences type already exists in the database
                ResultSet resultSet = MySql.executeSearch("SELECT * FROM `company_expences_type` WHERE `expences_type_name`= '" + expencestype + "'");

                if (resultSet.next()) {

                    // Show a warning if the expences type is already used
                    JOptionPane.showMessageDialog(this, "Expences Type is Already Used", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {

                    // Reset AUTO_INCREMENT value
                    MySql.executeUpdate("ALTER TABLE `company_expences_type` AUTO_INCREMENT = 1");

                    //Insert new type
                    MySql.executeUpdate("INSERT INTO `company_expences_type` (`expences_type_name` ) VALUES ('" + expencestype + "')");

                    loadExpencesTypes();  //load to table

                    reset();  // Clear the text field for the next entry

                    ExpencesTypeTextField.grabFocus(); //focus on textfield again after adding the type

                    //success message
                    JOptionPane.showMessageDialog(this, "Expences Type Added Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);

                }
            }
        } catch (Exception e) {

            e.printStackTrace();
            // Show an error message if the operation fails
            JOptionPane.showMessageDialog(this, "Error occurred while adding the Department", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addButtonActionPerformed

    //Update Button Function
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        // Get the index of the selected row in the table
        int row = ExpencesTypeTable.getSelectedRow(); //Row selected

        //Check if no row selected
        if (row == -1) {

            // Show a warning message if no row is selected
            JOptionPane.showMessageDialog(this, "Please Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {

            // Get the expences type from the text field
            String expencestype = ExpencesTypeTextField.getText();

            // Get the selected expences type ID and name from the table
            String selectedTypeid = String.valueOf(ExpencesTypeTable.getValueAt(row, 0));
            String selectedExpencesType = String.valueOf(ExpencesTypeTable.getValueAt(row, 1));

            // Check if the expences type field is empty
            if (expencestype.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter Expences Type", "Warning", JOptionPane.WARNING_MESSAGE);

                // Check if the new expences type matches the current type name
            } else if (selectedExpencesType.equals(expencestype)) {
                JOptionPane.showMessageDialog(this, "Please change Type name to update", "Warning", JOptionPane.WARNING_MESSAGE);

            } else {

                try {

                    //Search from Database
                    ResultSet resultSet = MySql.executeSearch("SELECT * FROM `company_expences_type` WHERE (`expences_type_name`='" + expencestype + "') AND `company_expences_type_id` != '" + selectedTypeid + "'");

                    if (resultSet.next()) {

                        JOptionPane.showMessageDialog(this, "Expences Type is Already Used", "Warning", JOptionPane.WARNING_MESSAGE);

                    } else {

                        //Update the Database
                        MySql.executeUpdate("UPDATE `company_expences_type` SET `expences_type_name` = '" + expencestype + "' WHERE `company_expences_type_id` = '" + selectedTypeid + "' ");

                        //load to table
                        loadExpencesTypes();
                        reset(); // Clear the text field for the next entry

                        //success message
                        JOptionPane.showMessageDialog(this, "Expences Type Updated Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    // Show an error message if the operation fails
                    JOptionPane.showMessageDialog(this, "Error occurred while updating the Type", "Error", JOptionPane.ERROR_MESSAGE);
                }

            }

        }
    }//GEN-LAST:event_updateButtonActionPerformed

    //Handle Mouse Clicks on the Jtable
    private void ExpencesTypeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExpencesTypeTableMouseClicked
        // Get the index of the selected row in the table
        int row = ExpencesTypeTable.getSelectedRow();

        // Display the type name of the selected row in the text field
        ExpencesTypeTextField.setText(String.valueOf(ExpencesTypeTable.getValueAt(row, 1)));

        // Disable the Add button while deleting
        addButton.setEnabled(false);

        // Check if the user double-clicked on a row
        if (evt.getClickCount() == 2) {

            String selectedExpencesTypeID = String.valueOf(ExpencesTypeTable.getValueAt(row, 0));
            String selectedExpencesType = String.valueOf(ExpencesTypeTable.getValueAt(row, 1));

            // Asking to confirm before the deletion
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this Type?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            //If user confirms the deletion
            if (confirm == JOptionPane.YES_OPTION) {

                try {

                    // Delete the selected expences type from the database
                    MySql.executeUpdate("DELETE FROM `company_expences_type` WHERE `company_expences_type_id`='" + selectedExpencesTypeID + "' AND `expences_type_name`='" + selectedExpencesType + "' ");

                    // Renumber remaining rows
                    MySql.executeUpdate("SET @row_number = 0");
                    MySql.executeUpdate("UPDATE `company_expences_type` "
                            + "SET `company_expences_type_id` = (@row_number := @row_number + 1) "
                            + "ORDER BY `company_expences_type_id`");

                    // Reset AUTO_INCREMENT value
                    MySql.executeUpdate("ALTER TABLE `company_expences_type` AUTO_INCREMENT = 1");

                    // Reload the Type table 
                    loadExpencesTypes();
                    reset(); // Clear the text field for the next entry

                    //success message
                    JOptionPane.showMessageDialog(this, "Expences Type Deleted Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);

                } catch (Exception e) {

                    e.printStackTrace();
                    // Show an error message if the operation fails
                    JOptionPane.showMessageDialog(this, "Error occurred while deleting the Expences Type", "Error", JOptionPane.ERROR_MESSAGE);

                }
            }

        }
    }//GEN-LAST:event_ExpencesTypeTableMouseClicked

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        String searchName = searchTextField.getText();

        search(searchName);
    }//GEN-LAST:event_searchTextFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        FlatMacLightLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddExpencesTypes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToDashboardButton;
    private javax.swing.JPanel BackToDashboardPanel;
    private javax.swing.JPanel ExpencesAddSectionPanal;
    private javax.swing.JPanel ExpencesTablePanal;
    private javax.swing.JTable ExpencesTypeTable;
    private javax.swing.JTextField ExpencesTypeTextField;
    private javax.swing.JPanel TypeSearchPanal;
    private com.k33ptoo.components.KButton addButton;
    private javax.swing.JPanel bodyPanal;
    private javax.swing.JPanel headerPanal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField searchTextField;
    private com.k33ptoo.components.KButton updateButton;
    // End of variables declaration//GEN-END:variables

// Function to reset the input fields and table selection
    private void reset() {

        ExpencesTypeTextField.setText("");
        addButton.setEnabled(true);
        ExpencesTypeTable.clearSelection();

        //Re-add the placeholder to refreshed textfield
        addPlaceholder();
    }
}
