/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr_department_gui;

import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.MySql;

/**
 *
 * @author sanja
 */
public class AddNewCustomer extends javax.swing.JFrame {

    /**
     * Creates new form Add_New_Customer
     */
    public AddNewCustomer() {

        initComponents();

        generateButton.grabFocus();
        customerIDTextField.setEditable(false);
        addPlaceholder(); //placeholder to textfield
        loadCustomers();
    }

    //addplaceholder method
    private void addPlaceholder() {

        //ID textfield placeholder and color
        customerIDTextField.setText("Customer ID");
        customerIDTextField.setForeground(Color.GRAY);

        //First Name textfield placeholder and color
        FirstNameTextfield.setText("First Name");
        FirstNameTextfield.setForeground(Color.GRAY);

        //Last Name textfield placeholder and color
        LastNameTextfield.setText("Last Name");
        LastNameTextfield.setForeground(Color.GRAY);

        //Address textfield placeholder and color
        AddressTextfield.setText("Address");
        AddressTextfield.setForeground(Color.GRAY);

        //Mobile textfield placeholder and color
        EmailAddressTextfield.setText("Email Address");
        EmailAddressTextfield.setForeground(Color.GRAY);

        //Email textfield placeholder and color
        MobileTextfield.setText("Mobile Number");
        MobileTextfield.setForeground(Color.GRAY);

        //Search textfield placeholder and color
        searchTextField.setText("Search by name/email/mobile");
        searchTextField.setForeground(Color.GRAY);

    }

    //load customers to table
    private void loadCustomers() {
        try {

            // Execute an SQL query to fetch all records from the "new_customer" table
            ResultSet resultSet = MySql.executeSearch("SELECT * FROM `customer` ");

            DefaultTableModel model = (DefaultTableModel) CustomerTable.getModel();
            model.setRowCount(0);  // Clear any existing rows in the table 

            // Loop through the result set to extract cutomer data
            while (resultSet.next()) {

                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("customer_id"));
                vector.add(resultSet.getString("first_name"));
                vector.add(resultSet.getString("last_name"));
                vector.add(resultSet.getString("address"));
                vector.add(resultSet.getString("mobile"));
                vector.add(resultSet.getString("email"));

                model.addRow(vector); // Add the vector as a new row to the table model

            }
        } catch (Exception e) {

            e.printStackTrace();

        }
    }

    //Search method
    private void search(String searchTerm) {

        DefaultTableModel model = (DefaultTableModel) CustomerTable.getModel();

        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);

        CustomerTable.setRowSorter(tr);

        if (searchTerm.trim().length() == 0) {

            tr.setRowFilter(null);

        } else {

            // Apply the RowFilter to search across columns 1 (First Name), 2 (Last Name), 4 (Email), and 5 (Mobile)
            tr.setRowFilter(RowFilter.regexFilter("(?i)" + searchTerm, 0, 1, 2, 4, 5));

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HeaderPanel = new javax.swing.JPanel();
        Header = new javax.swing.JLabel();
        BodyPanel = new javax.swing.JPanel();
        BackToDashboardPanel = new javax.swing.JPanel();
        BackToDashboardButton = new javax.swing.JButton();
        CustomerViewPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CustomerTable = new javax.swing.JTable();
        AddCustomerPanel = new javax.swing.JPanel();
        FirstName = new javax.swing.JLabel();
        FirstNameTextfield = new javax.swing.JTextField();
        LastName = new javax.swing.JLabel();
        LastNameTextfield = new javax.swing.JTextField();
        Address = new javax.swing.JLabel();
        AddressTextfield = new javax.swing.JTextField();
        Email = new javax.swing.JLabel();
        MobileTextfield = new javax.swing.JTextField();
        mobile = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        customerIDTextField = new javax.swing.JTextField();
        generateButton = new javax.swing.JButton();
        addButton = new com.k33ptoo.components.KButton();
        refreshButton = new javax.swing.JButton();
        EmailAddressTextfield = new javax.swing.JTextField();
        searchPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        HeaderPanel.setBackground(new java.awt.Color(153, 153, 153));
        HeaderPanel.setPreferredSize(new java.awt.Dimension(656, 60));

        Header.setBackground(new java.awt.Color(153, 153, 153));
        Header.setFont(new java.awt.Font("Audiowide", 0, 24)); // NOI18N
        Header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Header.setText("New Customer");
        Header.setPreferredSize(new java.awt.Dimension(194, 50));

        javax.swing.GroupLayout HeaderPanelLayout = new javax.swing.GroupLayout(HeaderPanel);
        HeaderPanel.setLayout(HeaderPanelLayout);
        HeaderPanelLayout.setHorizontalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Header, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
        );
        HeaderPanelLayout.setVerticalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Header, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );

        getContentPane().add(HeaderPanel, java.awt.BorderLayout.PAGE_START);

        BodyPanel.setLayout(new java.awt.BorderLayout());

        BackToDashboardPanel.setBackground(new java.awt.Color(153, 153, 153));
        BackToDashboardPanel.setPreferredSize(new java.awt.Dimension(656, 50));

        BackToDashboardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/back-arrow.png"))); // NOI18N
        BackToDashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToDashboardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackToDashboardPanelLayout = new javax.swing.GroupLayout(BackToDashboardPanel);
        BackToDashboardPanel.setLayout(BackToDashboardPanelLayout);
        BackToDashboardPanelLayout.setHorizontalGroup(
            BackToDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackToDashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackToDashboardButton)
                .addContainerGap(845, Short.MAX_VALUE))
        );
        BackToDashboardPanelLayout.setVerticalGroup(
            BackToDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackToDashboardPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BackToDashboardButton)
                .addGap(5, 5, 5))
        );

        BodyPanel.add(BackToDashboardPanel, java.awt.BorderLayout.PAGE_END);

        CustomerTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Address", "Email", "Mobile"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CustomerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(CustomerTable);

        AddCustomerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        AddCustomerPanel.setPreferredSize(new java.awt.Dimension(656, 200));

        FirstName.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        FirstName.setText("First Name");

        FirstNameTextfield.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        FirstNameTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                FirstNameTextfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                FirstNameTextfieldFocusLost(evt);
            }
        });
        FirstNameTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FirstNameTextfieldKeyPressed(evt);
            }
        });

        LastName.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        LastName.setText("Last Name ");

        LastNameTextfield.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        LastNameTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                LastNameTextfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                LastNameTextfieldFocusLost(evt);
            }
        });
        LastNameTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastNameTextfieldActionPerformed(evt);
            }
        });
        LastNameTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LastNameTextfieldKeyPressed(evt);
            }
        });

        Address.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        Address.setText("Address");

        AddressTextfield.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        AddressTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddressTextfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AddressTextfieldFocusLost(evt);
            }
        });
        AddressTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddressTextfieldActionPerformed(evt);
            }
        });
        AddressTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddressTextfieldKeyPressed(evt);
            }
        });

        Email.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        Email.setText("Mobile No");

        MobileTextfield.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        MobileTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                MobileTextfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                MobileTextfieldFocusLost(evt);
            }
        });
        MobileTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MobileTextfieldActionPerformed(evt);
            }
        });
        MobileTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MobileTextfieldKeyPressed(evt);
            }
        });

        mobile.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        mobile.setText("Email Address");

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel1.setText("Customer ID");

        customerIDTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerIDTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerIDTextFieldFocusLost(evt);
            }
        });
        customerIDTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerIDTextFieldKeyPressed(evt);
            }
        });

        generateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/generate.png"))); // NOI18N
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        generateButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                generateButtonKeyPressed(evt);
            }
        });

        addButton.setText("Add");
        addButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addButton.setkEndColor(new java.awt.Color(0, 204, 204));
        addButton.setkHoverEndColor(new java.awt.Color(0, 102, 153));
        addButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        addButton.setkHoverStartColor(new java.awt.Color(0, 204, 204));
        addButton.setkPressedColor(new java.awt.Color(0, 102, 153));
        addButton.setkSelectedColor(new java.awt.Color(0, 102, 153));
        addButton.setkStartColor(new java.awt.Color(0, 102, 153));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/refresh.png"))); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        EmailAddressTextfield.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        EmailAddressTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                EmailAddressTextfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                EmailAddressTextfieldFocusLost(evt);
            }
        });
        EmailAddressTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                EmailAddressTextfieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout AddCustomerPanelLayout = new javax.swing.GroupLayout(AddCustomerPanel);
        AddCustomerPanel.setLayout(AddCustomerPanelLayout);
        AddCustomerPanelLayout.setHorizontalGroup(
            AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(AddCustomerPanelLayout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(AddCustomerPanelLayout.createSequentialGroup()
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(refreshButton))
                        .addGroup(AddCustomerPanelLayout.createSequentialGroup()
                            .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(FirstNameTextfield, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addGroup(AddCustomerPanelLayout.createSequentialGroup()
                                            .addComponent(customerIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(generateButton))))
                                .addComponent(LastNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(26, 26, 26)
                            .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Email)
                                .addComponent(Address)
                                .addComponent(AddressTextfield)
                                .addComponent(mobile)
                                .addComponent(MobileTextfield, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                .addComponent(EmailAddressTextfield)))))
                .addGap(0, 80, Short.MAX_VALUE))
        );
        AddCustomerPanelLayout.setVerticalGroup(
            AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddCustomerPanelLayout.createSequentialGroup()
                .addContainerGap(2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Address)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AddressTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mobile)
                    .addGroup(AddCustomerPanelLayout.createSequentialGroup()
                        .addComponent(FirstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FirstNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmailAddressTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddCustomerPanelLayout.createSequentialGroup()
                        .addComponent(LastName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LastNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddCustomerPanelLayout.createSequentialGroup()
                        .addComponent(Email)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MobileTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(AddCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel2.setText("First Name / Last Name / Email / Mobile");

        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusLost(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(504, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout CustomerViewPanelLayout = new javax.swing.GroupLayout(CustomerViewPanel);
        CustomerViewPanel.setLayout(CustomerViewPanelLayout);
        CustomerViewPanelLayout.setHorizontalGroup(
            CustomerViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddCustomerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CustomerViewPanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1)
                .addGap(51, 51, 51))
            .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CustomerViewPanelLayout.setVerticalGroup(
            CustomerViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CustomerViewPanelLayout.createSequentialGroup()
                .addComponent(AddCustomerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        BodyPanel.add(CustomerViewPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(BodyPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackToDashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToDashboardButtonActionPerformed

        this.dispose();

    }//GEN-LAST:event_BackToDashboardButtonActionPerformed

    private void MobileTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MobileTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MobileTextfieldActionPerformed

    private void LastNameTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastNameTextfieldActionPerformed
        AddressTextfield.grabFocus();
    }//GEN-LAST:event_LastNameTextfieldActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed

        customerIDTextField.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // Sets back to Customer Id Color origin
        customerIDTextField.setForeground(Color.BLACK);

        // Generate Id when button clicked
        long cusid = System.currentTimeMillis();
        customerIDTextField.setText("CUS" + String.valueOf(cusid));

        // Enable the text field (if it was disabled)
        customerIDTextField.setEnabled(true);

        // Request focus to the text field
        customerIDTextField.setFocusable(true);


    }//GEN-LAST:event_generateButtonActionPerformed

    private void AddressTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddressTextfieldActionPerformed
        EmailAddressTextfield.grabFocus();
    }//GEN-LAST:event_AddressTextfieldActionPerformed

    //Add Button function
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        try {

            // Get the text entered in the text fields
            String customerid = customerIDTextField.getText(); //Select cutomer id textfield
            String firstname = FirstNameTextfield.getText(); //Select first name textfield
            String lastname = LastNameTextfield.getText(); //Select last name textfield
            String address = AddressTextfield.getText(); //Select address textfield
            String email = EmailAddressTextfield.getText(); //Select email textfield
            String mobileno = MobileTextfield.getText(); //Select mobile textfield

            // Check if customer id is empty
            if (customerid.isEmpty() || customerid.equals("Customer ID")) {
                // Show a warning message if no customer id is entered
                JOptionPane.showMessageDialog(this, "Please click the button for a new ID", "Warning", JOptionPane.WARNING_MESSAGE);

                generateButton.grabFocus();

                // Check if first name is empty
            } else if (firstname.isEmpty() || firstname.equals("First Name")) {
                // Show a warning message if no first name is entered
                JOptionPane.showMessageDialog(this, "Please enter First Name", "Warning", JOptionPane.WARNING_MESSAGE);

                FirstNameTextfield.grabFocus();

                // Check if last name is empty
            } else if (firstname.length() < 2 || firstname.length() > 50) {
                // Show a warning message if no first name is entered
                JOptionPane.showMessageDialog(this, "First name must include 2 - 50 characters", "Warning", JOptionPane.WARNING_MESSAGE);

                FirstNameTextfield.grabFocus();

                // Check if last name is empty
            } else if (lastname.isEmpty() || lastname.equals("Last Name")) {
                // Show a warning message if no last name is entered
                JOptionPane.showMessageDialog(this, "Please enter Last Name", "Warning", JOptionPane.WARNING_MESSAGE);

                LastNameTextfield.grabFocus();

                // Check if address is empty
            } else if (lastname.length() < 2 || lastname.length() > 50) {
                // Show a warning message if no first name is entered
                JOptionPane.showMessageDialog(this, "Last name must include 2 - 50 characters ", "Warning", JOptionPane.WARNING_MESSAGE);

                LastNameTextfield.grabFocus();

                // Check if last name is empty
            } else if (address.isEmpty() || address.equals("Address")) {
                // Show a warning message if no address is entered
                JOptionPane.showMessageDialog(this, "Please enter Address", "Warning", JOptionPane.WARNING_MESSAGE);

                AddressTextfield.grabFocus();

                // Check if mobile is empty
            } else if (email.isEmpty() || email.equals("Email Address")) {
                // Show a warning message if no email is entered
                JOptionPane.showMessageDialog(this, "Please enter Email", "Warning", JOptionPane.WARNING_MESSAGE);

                EmailAddressTextfield.grabFocus();

            } else if (email.length() < 5 || email.length() > 100) {
                // Show a warning message if no first name is entered
                JOptionPane.showMessageDialog(this, "Email address must include 5 - 100 characters ", "Warning", JOptionPane.WARNING_MESSAGE);

                EmailAddressTextfield.grabFocus();

                // Check if email name is empty
            } else if (!email.matches("^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$")) {

                JOptionPane.showMessageDialog(this, "Please enter valid email address", "Incorrect email type", JOptionPane.WARNING_MESSAGE);

                EmailAddressTextfield.grabFocus();

            } else if (mobileno.isEmpty() || mobileno.equals("Mobile Number")) {
                // Show a warning message if no mobile number is entered
                JOptionPane.showMessageDialog(this, "Please enter Mobile Number", "Warning", JOptionPane.WARNING_MESSAGE);

                MobileTextfield.grabFocus();

            } else if (!mobileno.matches("^(?:0|94|\\+94|0094)?(?:(11|21|23|24|25|26|27|31|32|33|34|35|36|37|38|41|45|47|51|52|54|55|57|63|65|66|67|81|91)(0|2|3|4|5|7|9)|7(0|1|2|4|5|6|7|8)\\d)\\d{6}$")) {
                JOptionPane.showMessageDialog(this, "Please enter valid Mobile Number", "Warning", JOptionPane.WARNING_MESSAGE);

                MobileTextfield.grabFocus();

                // Check if email is empty
            } else if (mobileno.length() != 10) {
                // Show a warning message if no first name is entered
                JOptionPane.showMessageDialog(this, "mobile number must include 10 characters ", "Warning", JOptionPane.WARNING_MESSAGE);

                MobileTextfield.grabFocus();

                // Check if last name is empty
            } else {

                // Check if the customer already exists in the database
                ResultSet resultSet = MySql.executeSearch("SELECT * FROM `customer` WHERE `customer_id`= '" + customerid + "' OR `mobile`='" + mobileno + "'");

                if (resultSet.next()) {

                    // Show a warning if the customer is already added
                    JOptionPane.showMessageDialog(this, "Customer Name Already Added", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {

                    //Insert new customer
                    MySql.executeUpdate("INSERT INTO `customer` (`customer_id`,`first_name`,`last_name`,`address`,`mobile`,`email` ) VALUES ('" + customerid + "','" + firstname + "','" + lastname + "','" + address + "','" + mobileno + "','" + email + "')");

                    loadCustomers();  //load to table

                    reset();  // Clear the text field for the next entry                 

                    //success message
                    JOptionPane.showMessageDialog(this, firstname + " " + lastname + " " + "Added Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);

                    generateButton.grabFocus();

                }
            }
        } catch (Exception e) {

            e.printStackTrace();

            // Show an error message if the operation fails
            JOptionPane.showMessageDialog(this, e + " " + "Error occurred while adding the Customer", "Error", JOptionPane.ERROR_MESSAGE);

            generateButton.grabFocus();

        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        reset(); //refresh the frame
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void customerIDTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerIDTextFieldFocusGained
        //check and set clear the current textfield to enter data
        if (customerIDTextField.getText().equals("Customer ID")) {

            customerIDTextField.setText("");

            customerIDTextField.setForeground(Color.BLACK);

        }
    }//GEN-LAST:event_customerIDTextFieldFocusGained

    private void customerIDTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerIDTextFieldFocusLost
        //set back the placeholder
        if (customerIDTextField.getText().isEmpty()) {

            customerIDTextField.setText("Customer ID");

            customerIDTextField.setForeground(Color.GRAY);

        }
    }//GEN-LAST:event_customerIDTextFieldFocusLost

    private void FirstNameTextfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FirstNameTextfieldFocusGained
        //check and set clear the current textfield to enter data
        if (FirstNameTextfield.getText().equals("First Name")) {

            FirstNameTextfield.setText("");

            FirstNameTextfield.setForeground(Color.BLACK);

        }
    }//GEN-LAST:event_FirstNameTextfieldFocusGained

    private void FirstNameTextfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FirstNameTextfieldFocusLost
        //set back the placeholder
        if (FirstNameTextfield.getText().isEmpty()) {

            FirstNameTextfield.setText("First Name");

            FirstNameTextfield.setForeground(Color.GRAY);

        }
    }//GEN-LAST:event_FirstNameTextfieldFocusLost

    private void LastNameTextfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_LastNameTextfieldFocusGained
        //check and set clear the current textfield to enter data
        if (LastNameTextfield.getText().equals("Last Name")) {

            LastNameTextfield.setText("");

            LastNameTextfield.setForeground(Color.BLACK);

        }
    }//GEN-LAST:event_LastNameTextfieldFocusGained

    private void LastNameTextfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_LastNameTextfieldFocusLost
        //set back the placeholder
        if (LastNameTextfield.getText().isEmpty()) {

            LastNameTextfield.setText("Last Name");

            LastNameTextfield.setForeground(Color.GRAY);

        }
    }//GEN-LAST:event_LastNameTextfieldFocusLost

    private void AddressTextfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AddressTextfieldFocusGained
        //check and set clear the current textfield to enter data
        if (AddressTextfield.getText().equals("Address")) {
            AddressTextfield.setText("");
            AddressTextfield.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_AddressTextfieldFocusGained

    private void AddressTextfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AddressTextfieldFocusLost
        //set back the placeholder
        if (AddressTextfield.getText().isEmpty()) {
            AddressTextfield.setText("Address");
            AddressTextfield.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_AddressTextfieldFocusLost

    private void MobileTextfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MobileTextfieldFocusGained
        //check and set clear the current textfield to enter data
        if (MobileTextfield.getText().equals("Mobile Number")) {
            MobileTextfield.setText("");
            MobileTextfield.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_MobileTextfieldFocusGained

    private void MobileTextfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MobileTextfieldFocusLost
        //set back the placeholder
        if (MobileTextfield.getText().isEmpty()) {
            MobileTextfield.setText("Mobile Number");
            MobileTextfield.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_MobileTextfieldFocusLost

    private void FirstNameTextfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FirstNameTextfieldKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            LastNameTextfield.grabFocus();

        }
    }//GEN-LAST:event_FirstNameTextfieldKeyPressed

    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained
        //check and set clear the current textfield to enter data
        if (searchTextField.getText().equals("Search by name/email/mobile")) {
            searchTextField.setText("");
            searchTextField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_searchTextFieldFocusGained

    private void searchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusLost
        //set back the placeholder
        if (searchTextField.getText().isEmpty()) {

            searchTextField.setText("Search by name/email/mobile");

            searchTextField.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_searchTextFieldFocusLost

    private void customerIDTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerIDTextFieldKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            FirstNameTextfield.grabFocus();

        }

    }//GEN-LAST:event_customerIDTextFieldKeyPressed

    private void generateButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_generateButtonKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            customerIDTextField.grabFocus();

        }

    }//GEN-LAST:event_generateButtonKeyPressed

    private void LastNameTextfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LastNameTextfieldKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            AddressTextfield.grabFocus();

        }

    }//GEN-LAST:event_LastNameTextfieldKeyPressed

    private void AddressTextfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddressTextfieldKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            EmailAddressTextfield.grabFocus();

        }

    }//GEN-LAST:event_AddressTextfieldKeyPressed

    private void MobileTextfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MobileTextfieldKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            addButton.grabFocus();

        }

    }//GEN-LAST:event_MobileTextfieldKeyPressed

    private void searchTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyTyped

        String searchTerm = searchTextField.getText();

        search(searchTerm);

    }//GEN-LAST:event_searchTextFieldKeyTyped

    private void EmailAddressTextfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_EmailAddressTextfieldFocusGained
        
        if (EmailAddressTextfield.getText().equals("Email Address")) {
            EmailAddressTextfield.setText("");
            EmailAddressTextfield.setForeground(Color.BLACK);
        }
        
    }//GEN-LAST:event_EmailAddressTextfieldFocusGained

    private void EmailAddressTextfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_EmailAddressTextfieldFocusLost
        
        if (EmailAddressTextfield.getText().isEmpty()) {
            EmailAddressTextfield.setText("Email Address");
            EmailAddressTextfield.setForeground(Color.GRAY);
        }
        
    }//GEN-LAST:event_EmailAddressTextfieldFocusLost

    private void EmailAddressTextfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EmailAddressTextfieldKeyPressed
        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            
            MobileTextfield.grabFocus();
            
        }
        
    }//GEN-LAST:event_EmailAddressTextfieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        FlatMacLightLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddNewCustomer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddCustomerPanel;
    private javax.swing.JLabel Address;
    private javax.swing.JTextField AddressTextfield;
    private javax.swing.JButton BackToDashboardButton;
    private javax.swing.JPanel BackToDashboardPanel;
    private javax.swing.JPanel BodyPanel;
    private javax.swing.JTable CustomerTable;
    private javax.swing.JPanel CustomerViewPanel;
    private javax.swing.JLabel Email;
    private javax.swing.JTextField EmailAddressTextfield;
    private javax.swing.JLabel FirstName;
    private javax.swing.JTextField FirstNameTextfield;
    private javax.swing.JLabel Header;
    private javax.swing.JPanel HeaderPanel;
    private javax.swing.JLabel LastName;
    private javax.swing.JTextField LastNameTextfield;
    private javax.swing.JTextField MobileTextfield;
    private com.k33ptoo.components.KButton addButton;
    private javax.swing.JTextField customerIDTextField;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel mobile;
    private javax.swing.JButton refreshButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

    // Function to reset the input fields and table selection
    private void reset() {

        customerIDTextField.setText("");
        generateButton.grabFocus();
        FirstNameTextfield.setText("");
        LastNameTextfield.setText("");
        AddressTextfield.setText("");
        EmailAddressTextfield.setText("");
        MobileTextfield.setText("");
        searchTextField.setText("");
        addButton.setEnabled(true);
        CustomerTable.clearSelection();

        //Re-add the placeholder to refreshed textfield
        addPlaceholder();
    }
}
