/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr_department_gui;

import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.MySql;

/**
 *
 * @author DELL
 */
public class AddDepartment extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeType
     */
    public AddDepartment() {
        initComponents();
        addPlaceholder(); //placeholder to textfield
        addNewDepartmentTextField.grabFocus();
        loadDepartments();

    }

    //addplaceholder method
    private void addPlaceholder() {

        //Department textfield placeholder and color
        addNewDepartmentTextField.setText("New Department");
        addNewDepartmentTextField.setForeground(Color.GRAY);
    }

    //load departments to table
    private void loadDepartments() {
        try {

            // Execute an SQL query to fetch all records from the "department" table
            ResultSet resultSet = MySql.executeSearch("SELECT * FROM `department` ");

            DefaultTableModel model = (DefaultTableModel) DepartmentTable.getModel();
            model.setRowCount(0);  // Clear any existing rows in the table 

            // Loop through the result set to extract department data
            while (resultSet.next()) {

                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("department_id"));
                vector.add(resultSet.getString("department_name"));

                model.addRow(vector); // Add the vector as a new row to the table model

            }
        } catch (Exception e) {

            e.printStackTrace();

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HeaderPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BodyPanel = new javax.swing.JPanel();
        AddTypePanel = new javax.swing.JPanel();
        addNewDepartmentTextField = new javax.swing.JTextField();
        refreshButton = new javax.swing.JButton();
        addButton = new com.k33ptoo.components.KButton();
        jLabel2 = new javax.swing.JLabel();
        TableUpdatePanel = new javax.swing.JPanel();
        ButtonPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        updateButton = new com.k33ptoo.components.KButton();
        deleteButton = new com.k33ptoo.components.KButton();
        BackToDashboardPanel = new javax.swing.JPanel();
        BackToDashboardButton = new javax.swing.JButton();
        TableViewPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DepartmentTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        HeaderPanel.setBackground(new java.awt.Color(153, 153, 153));
        HeaderPanel.setPreferredSize(new java.awt.Dimension(757, 60));

        jLabel1.setFont(new java.awt.Font("Audiowide", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Department");

        javax.swing.GroupLayout HeaderPanelLayout = new javax.swing.GroupLayout(HeaderPanel);
        HeaderPanel.setLayout(HeaderPanelLayout);
        HeaderPanelLayout.setHorizontalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderPanelLayout.createSequentialGroup()
                .addGap(278, 278, 278)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addGap(278, 278, 278))
        );
        HeaderPanelLayout.setVerticalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        getContentPane().add(HeaderPanel, java.awt.BorderLayout.PAGE_START);

        BodyPanel.setLayout(new java.awt.BorderLayout());

        AddTypePanel.setPreferredSize(new java.awt.Dimension(757, 70));

        addNewDepartmentTextField.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        addNewDepartmentTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addNewDepartmentTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addNewDepartmentTextFieldFocusLost(evt);
            }
        });
        addNewDepartmentTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewDepartmentTextFieldActionPerformed(evt);
            }
        });
        addNewDepartmentTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addNewDepartmentTextFieldKeyPressed(evt);
            }
        });

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/refresh.png"))); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addButton.setkEndColor(new java.awt.Color(0, 204, 204));
        addButton.setkHoverEndColor(new java.awt.Color(0, 102, 153));
        addButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        addButton.setkHoverStartColor(new java.awt.Color(0, 204, 204));
        addButton.setkPressedColor(new java.awt.Color(0, 102, 153));
        addButton.setkSelectedColor(new java.awt.Color(0, 102, 153));
        addButton.setkStartColor(new java.awt.Color(0, 102, 153));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Department");

        javax.swing.GroupLayout AddTypePanelLayout = new javax.swing.GroupLayout(AddTypePanel);
        AddTypePanel.setLayout(AddTypePanelLayout);
        AddTypePanelLayout.setHorizontalGroup(
            AddTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddTypePanelLayout.createSequentialGroup()
                .addContainerGap(127, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addComponent(addNewDepartmentTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(refreshButton)
                .addContainerGap(127, Short.MAX_VALUE))
        );
        AddTypePanelLayout.setVerticalGroup(
            AddTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddTypePanelLayout.createSequentialGroup()
                .addGroup(AddTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AddTypePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AddTypePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(AddTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addNewDepartmentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18))
        );

        BodyPanel.add(AddTypePanel, java.awt.BorderLayout.PAGE_START);

        TableUpdatePanel.setLayout(new java.awt.BorderLayout());

        ButtonPanel.setPreferredSize(new java.awt.Dimension(755, 60));

        updateButton.setText("Update");
        updateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        updateButton.setkEndColor(new java.awt.Color(0, 204, 204));
        updateButton.setkHoverEndColor(new java.awt.Color(0, 102, 153));
        updateButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        updateButton.setkHoverStartColor(new java.awt.Color(0, 204, 204));
        updateButton.setkPressedColor(new java.awt.Color(0, 102, 153));
        updateButton.setkSelectedColor(new java.awt.Color(0, 102, 153));
        updateButton.setkStartColor(new java.awt.Color(0, 102, 153));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteButton.setkEndColor(new java.awt.Color(0, 204, 204));
        deleteButton.setkHoverEndColor(new java.awt.Color(0, 102, 153));
        deleteButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        deleteButton.setkHoverStartColor(new java.awt.Color(0, 204, 204));
        deleteButton.setkPressedColor(new java.awt.Color(0, 102, 153));
        deleteButton.setkSelectedColor(new java.awt.Color(0, 102, 153));
        deleteButton.setkStartColor(new java.awt.Color(0, 102, 153));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonPanelLayout = new javax.swing.GroupLayout(ButtonPanel);
        ButtonPanel.setLayout(ButtonPanelLayout);
        ButtonPanelLayout.setHorizontalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ButtonPanelLayout.createSequentialGroup()
                .addContainerGap(240, Short.MAX_VALUE)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(240, Short.MAX_VALUE))
        );
        ButtonPanelLayout.setVerticalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        TableUpdatePanel.add(ButtonPanel, java.awt.BorderLayout.PAGE_START);

        BackToDashboardPanel.setBackground(new java.awt.Color(153, 153, 153));
        BackToDashboardPanel.setPreferredSize(new java.awt.Dimension(757, 50));

        BackToDashboardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/back-arrow.png"))); // NOI18N
        BackToDashboardButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BackToDashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToDashboardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackToDashboardPanelLayout = new javax.swing.GroupLayout(BackToDashboardPanel);
        BackToDashboardPanel.setLayout(BackToDashboardPanelLayout);
        BackToDashboardPanelLayout.setHorizontalGroup(
            BackToDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackToDashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackToDashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(818, Short.MAX_VALUE))
        );
        BackToDashboardPanelLayout.setVerticalGroup(
            BackToDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackToDashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackToDashboardButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TableUpdatePanel.add(BackToDashboardPanel, java.awt.BorderLayout.PAGE_END);

        DepartmentTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DepartmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Department ID", "Department"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DepartmentTable.getTableHeader().setReorderingAllowed(false);
        DepartmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DepartmentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DepartmentTable);

        javax.swing.GroupLayout TableViewPanelLayout = new javax.swing.GroupLayout(TableViewPanel);
        TableViewPanel.setLayout(TableViewPanelLayout);
        TableViewPanelLayout.setHorizontalGroup(
            TableViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TableViewPanelLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                .addGap(95, 95, 95))
        );
        TableViewPanelLayout.setVerticalGroup(
            TableViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TableViewPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );

        TableUpdatePanel.add(TableViewPanel, java.awt.BorderLayout.CENTER);

        BodyPanel.add(TableUpdatePanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(BodyPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackToDashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToDashboardButtonActionPerformed
        //Close the current frame
        dispose();

    }//GEN-LAST:event_BackToDashboardButtonActionPerformed

    private void addNewDepartmentTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewDepartmentTextFieldActionPerformed

    }//GEN-LAST:event_addNewDepartmentTextFieldActionPerformed

    //add button function
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {

            // Get the text entered in the department text field
            String departmentname = addNewDepartmentTextField.getText(); //Select department textfield

            // Check if the department name is empty
            if (departmentname.isEmpty()|| departmentname.equals("New Department")) {

                // Show a warning message if no department name is entered
                JOptionPane.showMessageDialog(this, "Please enter Department", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {

                // Check if the department name already exists in the database
                ResultSet resultSet = MySql.executeSearch("SELECT * FROM `department` WHERE `department_name`= '" + departmentname + "'");

                if (resultSet.next()) {

                    // Show a warning if the department name is already used
                    JOptionPane.showMessageDialog(this, "Department Name Already Used", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {

                    // Reset AUTO_INCREMENT value
                    MySql.executeUpdate("ALTER TABLE `department` AUTO_INCREMENT = 1");

                    //Insert new department
                    MySql.executeUpdate("INSERT INTO `department` (`department_name` ) VALUES ('" + departmentname + "')");

                    loadDepartments();  //load to table

                    reset();  // Clear the text field for the next entry

                    addNewDepartmentTextField.grabFocus(); //focus on textfield again after adding the department

                    //success message
                    JOptionPane.showMessageDialog(this, "Department Added Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);

                }
            }
        } catch (Exception e) {

            e.printStackTrace();
            // Show an error message if the operation fails
            JOptionPane.showMessageDialog(this, "Error occurred while adding the Department", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        
        reset(); //refresh the frame

    }//GEN-LAST:event_refreshButtonActionPerformed

    //update button function
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        // Get the index of the selected row in the table
        int row = DepartmentTable.getSelectedRow(); //Row selected

        //Check if no row selected
        if (row == -1) {

            // Show a warning message if no row is selected
            JOptionPane.showMessageDialog(this, "Please Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {

            // Get the department name from the text field
            String departmentname = addNewDepartmentTextField.getText();

            // Get the selected department ID and name from the table
            String selectedDepartmentid = String.valueOf(DepartmentTable.getValueAt(row, 0));
            String selectedDepartment = String.valueOf(DepartmentTable.getValueAt(row, 1));

            // Check if the department name field is empty
            if (departmentname.isEmpty()) {
                
                JOptionPane.showMessageDialog(this, "Please enter Department", "Warning", JOptionPane.WARNING_MESSAGE);

                // Check if the new department name matches the current name
            } else if (selectedDepartment.equals(departmentname)) {
                
                JOptionPane.showMessageDialog(this, "Please change Department name to update", "Warning", JOptionPane.WARNING_MESSAGE);

            } else {

                try {

                    //Search from Database
                    ResultSet resultSet = MySql.executeSearch("SELECT * FROM `department` WHERE (`department_name`='" + departmentname + "') AND `department_id` != '" + selectedDepartmentid + "'");

                    if (resultSet.next()) {

                        JOptionPane.showMessageDialog(this, "Department Name Already Used", "Warning", JOptionPane.WARNING_MESSAGE);

                    } else {

                        //Update the Database
                        MySql.executeUpdate("UPDATE `department` SET `department_name` = '" + departmentname + "' WHERE `department_id` = '" + selectedDepartmentid + "' ");

                        //load to table
                        loadDepartments();
                        reset(); // Clear the text field for the next entry

                        //success message
                        JOptionPane.showMessageDialog(this, "Department Updated Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    // Show an error message if the operation fails
                    JOptionPane.showMessageDialog(this, "Error occurred while updating the Department", "Error", JOptionPane.ERROR_MESSAGE);
                }

            }

        }
    }//GEN-LAST:event_updateButtonActionPerformed

    //delete button function
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        // Get the index of the selected row in the jtable
        int selectedRow = DepartmentTable.getSelectedRow(); //Row selected

        //Check if no row selected
        if (selectedRow == -1) {

            JOptionPane.showMessageDialog(this, "Please Select a Row to delete Department ", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {

            try {

                // Get the department ID of the selected row
                String selectedDepartmentid = String.valueOf(DepartmentTable.getValueAt(selectedRow, 0));

                // Confirm before the deletion
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this department?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {

                    // Delete the selected department from the database
                    MySql.executeUpdate("DELETE FROM `department` WHERE `department_id`='" + selectedDepartmentid + "' ");

                    // Renumber remaining rows
                    MySql.executeUpdate("SET @row_number = 0");
                    MySql.executeUpdate("UPDATE `department` "
                            + "SET `department_id` = (@row_number := @row_number + 1) "
                            + "ORDER BY `department_id`");

                    // Reset AUTO_INCREMENT value
                    MySql.executeUpdate("ALTER TABLE `department` AUTO_INCREMENT = 1");

                    //load to table
                    loadDepartments();
                    reset(); // Clear the text field for the next entry

                    //success message
                    JOptionPane.showMessageDialog(this, "Department Deleted Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);

                }
            } catch (Exception e) {

                e.printStackTrace();
                // Show an error message if the operation fails
                JOptionPane.showMessageDialog(this, "Error occurred while deleting the Department.", "Error", JOptionPane.ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    //Handle mouse clicks on the DepartmentTable
    private void DepartmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DepartmentTableMouseClicked

        // Get the index of the selected row in the table
        int row = DepartmentTable.getSelectedRow();

        // Display the department name of the selected row in the text field
        addNewDepartmentTextField.setText(String.valueOf(DepartmentTable.getValueAt(row, 1)));

        // Disable the Add button while deleting
        addButton.setEnabled(false);

        // Check if the user double-clicked on a row
        if (evt.getClickCount() == 2) {

            String selectedDepartmentID = String.valueOf(DepartmentTable.getValueAt(row, 0));
            String selectedDepartment = String.valueOf(DepartmentTable.getValueAt(row, 1));

            // Asking to confirm before the deletion
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this department?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            //If user confirms the deletion
            if (confirm == JOptionPane.YES_OPTION) {

                try {

                    // Delete the selected department from the database
                    MySql.executeUpdate("DELETE FROM `department` WHERE `department_id`='" + selectedDepartmentID + "' ");

                    // Renumber remaining rows
                    MySql.executeUpdate("SET @row_number = 0");
                    MySql.executeUpdate("UPDATE `department` "
                            + "SET `department_id` = (@row_number := @row_number + 1) "
                            + "ORDER BY `department_id`");

                    // Reset AUTO_INCREMENT value
                    MySql.executeUpdate("ALTER TABLE `department` AUTO_INCREMENT = 1");

                    // Reload the department table 
                    loadDepartments();
                    reset(); // Clear the text field for the next entry

                    //success message
                    JOptionPane.showMessageDialog(this, "Department Deleted Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);

                } catch (Exception e) {

                    e.printStackTrace();
                    // Show an error message if the operation fails
                    JOptionPane.showMessageDialog(this, "Error occurred while deleting the Department", "Error", JOptionPane.ERROR_MESSAGE);

                }
            }

        }
    }//GEN-LAST:event_DepartmentTableMouseClicked

    private void addNewDepartmentTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addNewDepartmentTextFieldFocusGained

        //check and set clear the current department textfield to enter data
        if (addNewDepartmentTextField.getText().equals("New Department")) {
            addNewDepartmentTextField.setText("");
            addNewDepartmentTextField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_addNewDepartmentTextFieldFocusGained

    private void addNewDepartmentTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addNewDepartmentTextFieldFocusLost

        //set back the placeholder
        if (addNewDepartmentTextField.getText().isEmpty()) {
            addNewDepartmentTextField.setText("New Department");
            addNewDepartmentTextField.setForeground(Color.GRAY);
        }

    }//GEN-LAST:event_addNewDepartmentTextFieldFocusLost

    private void addNewDepartmentTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addNewDepartmentTextFieldKeyPressed
        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            
            addButton.grabFocus();
            
        }
        
    }//GEN-LAST:event_addNewDepartmentTextFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {       

        FlatMacLightLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddDepartment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddTypePanel;
    private javax.swing.JButton BackToDashboardButton;
    private javax.swing.JPanel BackToDashboardPanel;
    private javax.swing.JPanel BodyPanel;
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JTable DepartmentTable;
    private javax.swing.JPanel HeaderPanel;
    private javax.swing.JPanel TableUpdatePanel;
    private javax.swing.JPanel TableViewPanel;
    private com.k33ptoo.components.KButton addButton;
    private javax.swing.JTextField addNewDepartmentTextField;
    private com.k33ptoo.components.KButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton refreshButton;
    private com.k33ptoo.components.KButton updateButton;
    // End of variables declaration//GEN-END:variables

    // Function to reset the input fields and table selection
    private void reset() {

        addNewDepartmentTextField.setText("");
        addNewDepartmentTextField.grabFocus();
        addButton.setEnabled(true);
        DepartmentTable.clearSelection();

        //Re-add the placeholder to refreshed textfield
        addPlaceholder();
    }

}
