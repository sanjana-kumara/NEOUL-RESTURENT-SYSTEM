/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package order_management_gui.kitchen_gui;

import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.MySql;
import order_management_gui.dinning_gui.DiningSelectPortion;

/**
 *
 * @author Hash_Boy
 */
public class KitchenDashboard extends javax.swing.JFrame {

    private static HashMap<String, String> statusMap = new HashMap<>();

    /**
     * Creates new form Kitchen_Dashboard
     */
    public KitchenDashboard() {
        initComponents();
        addPlaceholder();
        loadStatus();
        loadDetails();
        kButton3.grabFocus();
    }

    DefaultTableModel model;

    private void clear() {

        searchTextField.setText("");
        kButton3.grabFocus();

    }

    private void addPlaceholder() {

        searchTextField.setText("Search by Order ID");
        searchTextField.setForeground(Color.GRAY);
    }

    private void loadStatus() {
        try {

            ResultSet resultSet = MySql.executeSearch("SELECT * FROM `cooking_status` ");
            Vector<String> vector = new Vector<>();
            vector.add("Select Cooking Status");

            while (resultSet.next()) {
                vector.add(resultSet.getString("cooking_status_name"));
                statusMap.put(resultSet.getString("cooking_status_name"), resultSet.getString("cooking_status_id"));
            }

            DefaultComboBoxModel model = new DefaultComboBoxModel(vector);
            orderStatusChangeComboBox.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadDetails() {
        try {

            ResultSet resultSet = MySql.executeSearch("SELECT * FROM `order_details`"
                    + "INNER JOIN `cooking_status` ON `order_details`.`cooking_status_cooking_status_id` = `cooking_status`.`cooking_status_id`");

            DefaultTableModel model = (DefaultTableModel) KitchenDashboardTable.getModel();
            model.setRowCount(0);

            while (resultSet.next()) {

                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("order_id"));
                vector.add(resultSet.getString("customer_name"));
                vector.add(resultSet.getString("orderd_time"));
                vector.add(resultSet.getString("cooking_status.cooking_status_name"));

                model.addRow(vector);

            }
        } catch (Exception e) {

            e.printStackTrace();

        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        bodyPanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        orderStatusChangeComboBox = new javax.swing.JComboBox<>();
        kButton3 = new com.k33ptoo.components.KButton();
        statusUpdateButton = new com.k33ptoo.components.KButton();
        tableAndSignoutPanel = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        KitchenDashboardTable = new javax.swing.JTable();
        BackToDashboardPanel = new javax.swing.JPanel();
        BackToDashboardButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        headerPanel.setBackground(new java.awt.Color(153, 153, 153));
        headerPanel.setPreferredSize(new java.awt.Dimension(682, 50));

        jLabel1.setFont(new java.awt.Font("Audiowide", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Kitchen Dashboard");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        getContentPane().add(headerPanel, java.awt.BorderLayout.PAGE_START);

        bodyPanel.setLayout(new java.awt.BorderLayout());

        searchPanel.setPreferredSize(new java.awt.Dimension(686, 75));

        searchTextField.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusLost(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        orderStatusChangeComboBox.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        orderStatusChangeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Change Order Status" }));

        kButton3.setText("Search");
        kButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        kButton3.setkEndColor(new java.awt.Color(0, 204, 204));
        kButton3.setkHoverEndColor(new java.awt.Color(0, 102, 153));
        kButton3.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        kButton3.setkHoverStartColor(new java.awt.Color(0, 204, 204));
        kButton3.setkPressedColor(new java.awt.Color(0, 102, 153));
        kButton3.setkSelectedColor(new java.awt.Color(0, 102, 153));
        kButton3.setkStartColor(new java.awt.Color(0, 102, 153));
        kButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kButton3ActionPerformed(evt);
            }
        });
        kButton3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                kButton3KeyPressed(evt);
            }
        });

        statusUpdateButton.setText("Update");
        statusUpdateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        statusUpdateButton.setkEndColor(new java.awt.Color(0, 204, 204));
        statusUpdateButton.setkHoverEndColor(new java.awt.Color(0, 102, 153));
        statusUpdateButton.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        statusUpdateButton.setkHoverStartColor(new java.awt.Color(0, 204, 204));
        statusUpdateButton.setkPressedColor(new java.awt.Color(0, 102, 153));
        statusUpdateButton.setkSelectedColor(new java.awt.Color(0, 102, 153));
        statusUpdateButton.setkStartColor(new java.awt.Color(0, 102, 153));
        statusUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusUpdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(kButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(orderStatusChangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderStatusChangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        bodyPanel.add(searchPanel, java.awt.BorderLayout.PAGE_START);

        tableAndSignoutPanel.setLayout(new java.awt.BorderLayout());

        KitchenDashboardTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        KitchenDashboardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Customer Name", "Ordered Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        KitchenDashboardTable.getTableHeader().setReorderingAllowed(false);
        KitchenDashboardTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                KitchenDashboardTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(KitchenDashboardTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        tableAndSignoutPanel.add(tablePanel, java.awt.BorderLayout.CENTER);

        BackToDashboardPanel.setBackground(new java.awt.Color(153, 153, 153));
        BackToDashboardPanel.setPreferredSize(new java.awt.Dimension(686, 50));

        BackToDashboardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/back-arrow.png"))); // NOI18N
        BackToDashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToDashboardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackToDashboardPanelLayout = new javax.swing.GroupLayout(BackToDashboardPanel);
        BackToDashboardPanel.setLayout(BackToDashboardPanelLayout);
        BackToDashboardPanelLayout.setHorizontalGroup(
            BackToDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackToDashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackToDashboardButton)
                .addContainerGap(882, Short.MAX_VALUE))
        );
        BackToDashboardPanelLayout.setVerticalGroup(
            BackToDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackToDashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackToDashboardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tableAndSignoutPanel.add(BackToDashboardPanel, java.awt.BorderLayout.PAGE_END);

        bodyPanel.add(tableAndSignoutPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(bodyPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackToDashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToDashboardButtonActionPerformed

        dispose();

    }//GEN-LAST:event_BackToDashboardButtonActionPerformed

    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained
        if (searchTextField.getText().equals("Search by Order ID")) {
            searchTextField.setText("");
            searchTextField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_searchTextFieldFocusGained

    private void searchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusLost
        if (searchTextField.getText().isEmpty()) {
            searchTextField.setText("Search by Order ID");
            searchTextField.setForeground(Color.GRAY);
        }

    }//GEN-LAST:event_searchTextFieldFocusLost

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            kButton3.doClick();

        }
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        if (searchTextField.getText().trim().isEmpty()) {

            clear();

            loadDetails();

        }
    }//GEN-LAST:event_searchTextFieldKeyReleased

    private void kButton3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kButton3KeyPressed
        String id = searchTextField.getText();

        search(id);
    }//GEN-LAST:event_kButton3KeyPressed

    private void kButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kButton3ActionPerformed
        String id = searchTextField.getText();
        if (id.equals("Search by Order ID") || id.trim().isEmpty()) {
            loadDetails();
        } else {
            search(id.trim());
        }
    }//GEN-LAST:event_kButton3ActionPerformed

    private void KitchenDashboardTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KitchenDashboardTableMouseClicked

        if (evt.getClickCount() == 2 && !evt.isConsumed()) {

            evt.consume();

            int selectedRow = KitchenDashboardTable.getSelectedRow();

            if (selectedRow != -1) {

                String orderID = KitchenDashboardTable.getValueAt(selectedRow, 0).toString();

                String selectedOrderStatus = String.valueOf(KitchenDashboardTable.getValueAt(selectedRow, 2));

                orderStatusChangeComboBox.setSelectedItem(selectedOrderStatus);

                OrderDetails orderDialog = new OrderDetails((java.awt.Frame) SwingUtilities.getWindowAncestor(KitchenDashboardTable), true);

                orderDialog.setOrderDetails(orderID);

                orderDialog.setLocationRelativeTo(KitchenDashboardTable);

                orderDialog.setVisible(true);

            }
        }

    }//GEN-LAST:event_KitchenDashboardTableMouseClicked

    private void statusUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusUpdateButtonActionPerformed
        int row = KitchenDashboardTable.getSelectedRow(); //Get the selected row from jtable

        //Check if no row selected
        if (row == -1) {

            JOptionPane.showMessageDialog(this, "Please Select a Row", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {

            //Get input values
            String status = String.valueOf(orderStatusChangeComboBox.getSelectedItem());

            // Get data from the selected row
            String selectedOrderid = String.valueOf(KitchenDashboardTable.getValueAt(row, 0));
            String selectedOrderStatus = String.valueOf(KitchenDashboardTable.getValueAt(row, 2));

            orderStatusChangeComboBox.setSelectedItem(selectedOrderStatus);

            if (status.equals("Select Cooking Status")) {
                JOptionPane.showMessageDialog(this, "Please select Status", "Warning", JOptionPane.WARNING_MESSAGE);

            } else {

                try {
                    //Search from Database
                    ResultSet resultSet = MySql.executeSearch("SELECT * FROM `order_details` WHERE `order_id` = '" + selectedOrderid + "' AND `cooking_status_cooking_status_id` = '" + statusMap.get(status) + "'");;

                    if (resultSet.next()) {

                        JOptionPane.showMessageDialog(this, "Change Status to update", "Warning", JOptionPane.WARNING_MESSAGE);

                    } else {
                        MySql.executeUpdate("UPDATE `order_details` SET `cooking_status_cooking_status_id` = '" + statusMap.get(status) + "' "
                                + "WHERE `order_id` = '" + selectedOrderid + "'");

                        //load to table
                        loadDetails();
                        reset();// Clear the text field for the next entry

                        //success message
                        JOptionPane.showMessageDialog(this, "Status Updated Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error occurred while updating the Status", "Error", JOptionPane.ERROR_MESSAGE);
                }

            }

        }
    }//GEN-LAST:event_statusUpdateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        FlatMacLightLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KitchenDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToDashboardButton;
    private javax.swing.JPanel BackToDashboardPanel;
    private javax.swing.JTable KitchenDashboardTable;
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.k33ptoo.components.KButton kButton3;
    private javax.swing.JComboBox<String> orderStatusChangeComboBox;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchTextField;
    private com.k33ptoo.components.KButton statusUpdateButton;
    private javax.swing.JPanel tableAndSignoutPanel;
    private javax.swing.JPanel tablePanel;
    // End of variables declaration//GEN-END:variables

    private void search(String id) {

        model = (DefaultTableModel) KitchenDashboardTable.getModel();

        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);

        KitchenDashboardTable.setRowSorter(trs);

        if (id.trim().length() == 0) {

            trs.setRowFilter(null);

        } else {

            trs.setRowFilter(RowFilter.regexFilter("(?i)" + id, 0));

        }

    }

    private void reset() {

        searchTextField.setText("");
        searchTextField.grabFocus();
        orderStatusChangeComboBox.setSelectedIndex(0);
        KitchenDashboardTable.clearSelection();

        addPlaceholder();
    }
}
